" *****************************************************************************
" Vim Configuration 
" *****************************************************************************

" ==== Install Vim Plug & Missing Plugins ====================================

" Install vim-plug if not found:
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins:
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" ==== Plugins ================================================================

call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'chrisbra/csv.vim'
Plug 'godlygeek/tabular'
Plug 'hashivim/vim-terraform'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'ledger/vim-ledger'
Plug 'markonm/traces.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'pearofducks/ansible-vim'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'wellle/tmux-complete.vim'
call plug#end()

" ==== Visual =================================================================

" Disable menu bar in GVim:
set guioptions-=m

" Disable toolbar in GVim:
set guioptions-=T

" GVim Font:
if has ('gui')
    set guifont=Ubuntu\ Mono\ 14
endif

" Status line:
set laststatus=2
set statusline=%f\ %h%w%m%r%=%-14.(%l,%c%V%)\ %P

" Turn off visual bell:
set visualbell
set t_vb=

" Turn on line numbers:
set number

" Turn on cursor line:
set cursorline

" Word wrapping:
set wrap linebreak nolist

" Indents word-wrapped lines as much as the 'parent' line:
set breakindent

" Ensures word-wrap does not split words
set formatoptions=l
set lbr

" Tab indentation:
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" ==== Colour =================================================================

if has('nvim') || has('termguicolors')
  set termguicolors
endif

" Set theme:
colorscheme tomorrow_night_blue

" Make default theme readable:
set background=dark

" ==== Functionality ==========================================================

" Set clipboard as system clipboard:
set clipboard=unnamedplus

" Allow backspace over everything:
set backspace=indent,eol,start

" File encoding:
set encoding=utf-8

" Mouse mode:
set ttymouse=sgr
set mouse=a

" Keep undo history when switching buffer:
set hidden

" Turn backup off:
set nobackup
set nowb
set noswapfile

" Incremental search:
set incsearch

" Stop auto-indenting comments:
set indentkeys-=0#

" Add keyword delimiters:
set iskeyword+=-

" ==== Remaps =================================================================

" Switch buffers quickly:
nnoremap <C-N> :bn<CR>
nnoremap <C-P> :bp<CR>

" List buffers with fzf:
nnoremap <C-K> :Buffers<CR>

" Search for files with fzf:
" Make sure `stty -ixon` is included in `.bashrc` to reclaim Ctrl S.
noremap <C-S> :Files<CR>
" Search for lines in buffers with fzf:
noremap <C-F> :Lines<CR>

" Common Copy/Paste Shortcuts in GuiVim:
if has ('gui')
    vmap <C-S-c> "+yi
    vmap <C-S-v> c<ESC>"+p
    imap <C-S-v> <C-r><C-o>+
endif

" ==== Extension Settings =====================================================

" Fix for vim-ledger errors:
" https://github.com/ledger/vim-ledger/issues/143#issuecomment-1562279948
let g:ledger_is_hledger=v:true

" vim-markdown settings:
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_fenced_languages = ['bash=sh', 'json', 'python', 'css', 'html', 'ini=dosini']
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_auto_insert_bullets = 1

" goyo.vim:
let g:goyo_width = 80
let g:goyo_height = "100%"

" ==== Custom Commands & Functions ============================================

command! CopyFilePath :let @+ = expand('%:p') | echo "Path copied to clipboard: " . expand('%:p')

" ++++ SIFT Functions +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

" Function to replace todo type entries with done:
function! SiftDone()
    %s/types: todo-[a-z0-9]/types: done/g
endfunction
command! SiftDone call SiftDone()

" Post fzf selection function. This removes anything the tab character and
" anything after it, which allows me to include frontmatter next to the
" filenames of SIFT entries:
function! OpenSelectedFileWithoutTitle(selected) abort
  " 'selected' contains the selected items from fzf, separated by newline characters
  let file_line = split(a:selected, "\n")[0]
  let file_path = substitute(file_line, '\t.*$', '', '')
  execute 'edit' fnameescape(file_path)
endfunction

" Search entry titles:
command! -bang SiftTitles call fzf#run(fzf#wrap({ 'source': 'grep --recursive "^title:" $HOME/my/files/documents/SIFT/content/**/*.md | sed "s/:title:/\t/g" | sort --reverse', 'options': '--multi --delimiter "\t" --preview "bat --italic-text=always --style=header-filename --theme=base16 --wrap=auto --color=always {1}" --preview-window=up:70%', 'sink': function('OpenSelectedFileWithoutTitle') },<bang>0))
noremap \st :SiftTitles<CR>
noremap \st! :SiftTitles!<CR>

" Search entry aliases:
command! -bang SiftAliases call fzf#run(fzf#wrap({ 'source': 'grep --recursive "^alias:" $HOME/my/files/documents/SIFT/content/**/*.md | sed "s/:alias:/\t/g" | sort --reverse', 'options': '--multi --delimiter "\t" --preview "bat --italic-text=always --style=header-filename --theme=base16 --wrap=auto --color=always {1}" --preview-window=up:70%', 'sink': function('OpenSelectedFileWithoutTitle') },<bang>0))
noremap \sa :SiftAliases<CR>
noremap \sa! :SiftAliases!<CR>

" Search entry content:
command! -bang -nargs=* SiftContent call fzf#vim#grep('rg --glob "*.md" --column --line-number --no-heading --color=always -- '.shellescape(<q-args>), 0, {'options': '--no-hscroll --delimiter : --nth 4.. --preview "bat --italic-text=always --style=header-filename --theme=base16 --wrap=auto --color=always {1}" --preview-window=up:70%', 'dir': expand('$HOME/my/files/documents/SIFT/content')}, <bang>0)
noremap \sc :SiftContent<CR>
noremap \sc! :SiftContent!<CR>
